generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  solanaAddress String @unique @map("solana_address")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  nonces Nonce[]
  agents Agent[]

  @@map("users")
}

model Nonce {
  id Int @id @default(autoincrement())
  value String @map("value")
  expiresAt DateTime @map("expires_at")
  usedAt DateTime? @map("used_at")

  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])

  @@map("nonces")
}

model Agent {
  id           String    @id @default(uuid())
  externalId   String    @unique @map("external_id") // To store FereAI's agent ID
  name         String
  description  String
  persona      Int
  evmAddress   String    @map("evm_address")
  solAddress   String    @map("sol_address")
  isActive     Boolean   @default(true) @map("is_active")
  holdings     Holding[]
  createdAt    DateTime  @default(now()) @map("created_at")

  ownerId       Int       @map("owner_id")
  owner         User      @relation(fields: [ownerId], references: [id])

  @@map("agents")
}

model Coin {
  id          Int    @id @default(autoincrement())
  tokenName   String @map("token_name")
  poolName    String @map("pool_name")
  baseAddress String @unique @map("base_address")
  poolAddress String @map("pool_address")
  decimals    Int    @map("decimals")

  holdings Holding[]

  @@map("coins")
}

model Holding {
  externalId String @unique @map("external_id") // To store FereAI's holding ID

  agentId  String   @map("agent_id")
  agent    Agent @relation(fields: [agentId], references: [id])

  coinId   Int   @map("coin_id")
  coin     Coin  @relation(fields: [coinId], references: [id])
  
  boughtAt DateTime @map("bought_at")
  tokensBought Int @map("tokens_bought")
  buyingPriceUsd Float @map("buying_price_usd")
  currPriceUsd Float @map("curr_price_usd")
  profitAbsUsd Float @map("profit_abs_usd")
  profitPerUsd Float @map("profit_per_usd")
  isActive Boolean @map("is_active")
  dryRun Boolean @map("dry_run")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([agentId, coinId])
  @@map("holdings")
}
